After you successfully setup kubernetes cluster, the next step is to configure a proper monitoring and alerting mechanism.
For monitoring we need these:
1- InfluxDB: InfluxDB is a time series database optimized for high-availability storage and rapid retrieval of time series data.
3- Grafana: Grafana can visualize data from multiple monitoring solutions. It presents nice dashboards and comes with built-in alerting. Plug in your favorite data source, and you’re ready to go.
4- Prometheus: Prometheus collects metrics from monitored targets by scraping metrics HTTP endpoints on these targets.

Download and extract the Yaml file from here:  	https://octoperf.com/img/blog/kraken-kubernetes-influxdb-grafana-telegraf/kraken-monitoring.zip
kubectl get configmap influxdb-config --export -o yaml >> influxdb-config.yaml
Flag --export has been deprecated, This flag is deprecated and will be removed in future.

check that the ConfigMap is created
kubectl describe configmap influxdb-config

Start by creating the configuration file influxdb-secrets.yaml
kubectl apply -f influxdb-secrets.yaml

Display the created Secret, environment variable values are not visible
kctl describe secret influxdb-secrets

Mount a Data Volume
curl -L https://github.com/kubernetes/kompose/releases/download/v1.18.0/kompose-linux-amd64 -o kompose
chmod +x kompose
sudo mv ./kompose /usr/local/bin/compose

 Create the following docker-compose.yml file
kompose convert -f docker-compose.yml

It generates a file named influxdb-data-persistentvolumeclaim.yaml though. Rename it to influxdb-data.yaml and update the storage capacity:
Finally create the PersistentVolumeClain:
kubectl apply -f influxdb-data.yaml

And check that the created PVC is matched to a PersistentVolume:
kubectl get persistentvolumeclaim influxdb-data

Create an InfluxDB Deployment
Let’s apply an InfluxDB Deployment at last. Create the influxdb-deployment.yaml file:
kubectl apply -f influxdb-deployment.yaml

Check the InfluxDb Deployment
check that the Deployment is created and ready:
kubectl get -f influxdb-deployment.yaml

Check for the corresponding Pod creation:
kubectl get pods

You can also describe the created Pod:
kubectl describe pod influxdb-deployment-?????

Connect to the Pod and display the content of the influxdb.conf configuration file:
> kubectl exec -it influxdb-deployment-69f6bf869f-bmxt4 -- /bin/bash
> root@influxdb-deployment-69f6bf869f-bmxt4:/# more /etc/influxdb/influxdb.conf 
reporting-disabled = false
bind-address = "127.0.0.1:8088"
[...]

Check secrets mapped
kubectl exec -it influxdb-deployment-69f6bf869f-bmxt4 -- /bin/bash


Then connect to InfluxDB and display the databases:
root@influxdb-deployment-69f6bf869f-bmxt4:/# influx --username admin --password kraken
Connected to http://localhost:8086 version 1.7.4
InfluxDB shell version: 1.7.4
Enter an InfluxQL query
> show databases
name: databases
name
----
gatling
_internal


Check Data Folder Mounted
kubectl get persistentvolumes

Describe the PersistentVolume named after our PVC:
kubectl describe pv pvc-a59b241b-ca22-4ea3-a7de-ac48e3493616

Expose a Deployment as a Service
Our goal here is to make InfluxDB accessible:
-	To Telegraf so it can inject data,
-	To Grafana in order to display dashboards based on these data.
Apply this configuration to the K8s cluster:
kubectl apply -f influxdb-service.yaml

Check for the created service
kubectl get services

it’s done and the port 8086 is opened.

Check also that the kube-dns service is started 
kubectl get services kube-dns --namespace=kube-system

We can finally test that our DNS setup is working with nslookup:
kubectl run curl --image=radial/busyboxplus:curl -i –tty


Deploy Telegraf
kubectl apply -f telegraf-config.yaml
kubectl apply -f telegraf-secrets.yaml
kubectl apply -f telegraf-deployment.yaml

Check Data Injection Into InfluxDB
Once the Telegraf Pod is started, verify that it injects some data into InfluxDB.
kubectl get pods

Another way to check this is by connecting to the pod and displaying available measurement for the telegraf database in InfluxDB:

kubectl exec -it influxdb-deployment-69f6bf869f-6gs82 -- /bin/bash
root@influxdb-deployment-69f6bf869f-6gs82:/# influx --username admin --password kraken
Connected to http://localhost:8086 version 1.7.4
InfluxDB shell version: 1.7.4
Enter an InfluxQL query
> show databases
name: databases
name
----
gatling
_internal
telegraf
> use telegraf
Using database telegraf
> show measurements
name: measurements
name
----
cpu
disk
diskio
kernel
mem
net
netstat
processes
swap
system
> exit
root@influxdb-deployment-69f6bf869f-6gs82:/# exit
exit

Deploy Grafana
Apply the Service configuration:

 kubectl apply -f grafana/grafana-service.yaml 

Deploy Prometheus
Create a folder called monitoring. Here we will create all our monitoring resources. Create a file called monitoring/namespace.yml with the content.
kind: Namespace
apiVersion: v1
metadata:
  name: monitoring

Apply & Test the namespace exists.
helm repo update
helm install stable/prometheus \
--namespace monitoring \
--name Prometheus

We can confirm by checking that the pods are running:
kubectl get pods -n monitoring

Connect to Grafana
First check the grafana-service pod Ip and then port forward
 
 

Connect to Prometheus
First check Prometheus-????-server endpoints IP and then port forward as follow:

 
 


Connect to Grafana service in url: http://localhost:3000 and with user:admin password: admin, then create datasourde with follow configuration and create dashboard with Json file. We can download Json file from this Url: https://grafana.com/grafana/dashboards
 
 
 



